{"version":3,"sources":["components/Navbar/Navbar.tsx","components/TodoForm/TodoForm.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["Navbar","className","href","id","TodoForm","props","useState","title","setTitle","onChange","event","target","value","onKeyPress","key","onAdd","type","placeholder","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onClick","App","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","console","log","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MACaA,EAAmB,kBAE5B,8BACA,sBAAKC,UAAU,yBAAf,UACE,mBAAGC,KAAK,IAAID,UAAU,aAAtB,kBACA,qBAAIE,GAAG,aAAaF,UAAU,6BAA9B,UACE,6BAAI,mBAAGC,KAAK,YAAR,oBACJ,6BAAI,mBAAGA,KAAK,cAAR,mCC2BGE,EA7B2B,SAACC,GAEvC,MAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OACI,sBAAKP,UAAU,cAAf,UACI,uBACAQ,SAdc,SAACC,GACnBF,EAASE,EAAMC,OAAOC,QAclBC,WAXgB,SAACH,GACJ,UAAdA,EAAMI,MACLT,EAAMU,MAAMR,GACZC,EAAS,MASTI,MAAOL,EACPS,KAAK,OAAOb,GAAG,QACfc,YAAY,cAEZ,uBAAOC,QAAQ,QAAQjB,UAAU,SAAjC,4BCOGkB,EA5B0B,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAExD,OAAoB,IAAjBF,EAAMG,OACE,mBAAGtB,UAAU,SAAb,wBAIR,6BACKmB,EAAMI,KAAI,SAAAC,GACP,IAAMC,EAAU,CAAC,QAMjB,OALGD,EAAKE,WACJD,EAAQE,KAAK,aAIV,oBAAI3B,UAAWyB,EAAQG,KAAK,KAA5B,SACP,kCACI,uBAAOb,KAAK,WAAWc,QAASL,EAAKE,UAAWlB,SAAU,kBAAMa,EAASG,EAAKtB,OAC9E,iCAAOsB,EAAKlB,MAAZ,OACA,mBAAGN,UAAU,0BAA0B8B,QAAS,kBAAMV,EAASI,EAAKtB,KAApE,wBAJ0CsB,EAAKtB,UCuCnD6B,EAvDO,WAEpB,MAA0B1B,mBAAkB,IAA5C,mBAAOc,EAAP,KAAca,EAAd,KAEAC,qBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAE1DN,EAASE,KACT,IAEFD,qBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUrB,MAE7C,CAACA,IA6BH,OACC,qCACG,cAAC,EAAD,IACA,sBAAKnB,UAAU,YAAf,UACE,sCACA,cAAC,EAAD,CAAUc,MAhCG,SAACR,GAClB,IAAMmC,EAAiB,CACrBnC,MAAOA,EACPJ,GAAIwC,KAAKC,MACTjB,WAAW,GAGbM,GAAS,SAAAY,GAAI,OAAKH,GAAL,mBAAiBtB,UA2B1B,cAAC,EAAD,CAAUA,MAAOA,EAAOE,SAxBR,SAACnB,GACrB8B,GAAS,SAAAY,GAAI,OAAIA,EAAKrB,KAAI,SAAAC,GACtB,OAAGA,EAAKtB,KAAOA,EACb,2BACKsB,GADL,IAEEE,WAAYF,EAAKE,aAErBmB,QAAQC,IAAI,SACPtB,UAgB4CJ,SAXpC,SAAClB,GAClB8B,GAAS,SAAAY,GAAI,OAAIA,EAAKG,QAAO,SAAAvB,GAAI,OAAIA,EAAKtB,KAAQA,kBC1CtD8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ef9bae40.chunk.js","sourcesContent":["import React from \"react\"\nexport const Navbar: React.FC = () => (\n\n    <nav>\n    <div className=\"nav-wrapper indigo px1\">\n      <a href=\"/\" className=\"brand-logo\">Logo</a>\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n        <li><a href=\"sass.html\">Sass</a></li>\n        <li><a href=\"badges.html\">Components</a></li>\n      </ul>\n    </div>\n  </nav>\n)","import React, {useState} from \"react\";\n\ninterface TodoFormProps{\n     onAdd(title:string): void\n}\n\nconst TodoForm: React.FC<TodoFormProps> = (props) => {\n\n    const [title, setTitle] = useState<string>('')\n\n    const changeHandler = (event:React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.target.value)\n    }\n\n    const keyPressHandler = (event:React.KeyboardEvent<HTMLInputElement>) => {\n        if(event.key === 'Enter'){\n            props.onAdd(title)\n            setTitle('')\n        }\n    }\n\n    return(\n        <div className=\"input-field\">\n            <input\n            onChange={changeHandler}\n            onKeyPress={keyPressHandler}\n            value={title} \n            type=\"text\" id=\"title\" \n            placeholder=\"your text\">\n            </input>\n            <label htmlFor=\"title\" className=\"active\"> your text</label>\n        </div>\n    )\n}\n\nexport default TodoForm","import React from \"react\";\nimport {ITodo} from '../../interfaces'\n\ntype TodoListProps = {\n    todos: ITodo[]\n    onToggle(id:number): void\n    onRemove(id:number): void\n}\n\nconst TodoList:React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\n\n    if(todos.length === 0){\n        return <p className='center'>No entries</p>\n    }\n\n    return(\n       <ul>\n           {todos.map(todo => {\n               const classes = ['todo']\n               if(todo.completed){\n                   classes.push('completed')\n               }\n\n\n               return(<li className={classes.join(' ')} key={todo.id}>\n               <label>\n                   <input type='checkbox' checked={todo.completed} onChange={() => onToggle(todo.id)}/>\n                   <span>{todo.title} </span>\n                   <i className='material-icons red-text' onClick={() => onRemove(todo.id)}>delete</i>\n               </label>\n           </li> )\n           })}\n           \n       </ul>\n    )\n}\n\nexport default TodoList","\nimport React, {useState, useEffect } from 'react';\nimport { Navbar } from './components/Navbar/Navbar';\nimport TodoForm from './components/TodoForm/TodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport { ITodo } from './interfaces';\n\n\nconst App :React.FC = () => {\n\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\n\n    setTodos(saved) \n  },[])\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n\n  },[todos])\n\n  const addHandler = (title:string)=> {\n    const newTodo: ITodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    }\n    // setTodos([newTodo, ...todos])\n    setTodos(prev => [newTodo, ...todos])\n  }\n\n  const toggleHandler = (id:number) =>{\n    setTodos(prev => prev.map(todo => {\n        if(todo.id === id){\n          return{\n            ...todo,\n            completed: !todo.completed }\n        } \n        console.log('click')\n      return todo\n        })\n      )\n  }\n\n  const removeTodo = (id:number) =>{\n    setTodos(prev => prev.filter(todo => todo.id !==  id))\n  }\n\n  return (\n   <>\n      <Navbar />\n      <div className='container'>\n        <h1>Test</h1>\n        <TodoForm onAdd={addHandler}/>\n\n        <TodoList todos={todos} onToggle={toggleHandler} onRemove={removeTodo}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}